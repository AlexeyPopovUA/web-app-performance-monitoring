name: Web App Deployment

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'packages/web-app/**'
      - 'pnpm-workspace.yaml'
      - 'package.json'
      - '.github/workflows/web-app.yml'
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy from'
        required: true
        default: 'main'
        type: string

env:
  AWS_ACCOUNT: ${{ vars.AWS_ACCOUNT }}
  AWS_DEPLOYMENT_REGION: ${{ vars.AWS_DEPLOYMENT_REGION }}
  NODE_VERSION: '22'

jobs:
  build:
    name: Build Next.js SSG Application
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.artifact.outputs.name }}
      branch-name: ${{ steps.branch.outputs.name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get branch name
        id: branch
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "name=${{ github.event.inputs.branch }}" >> $GITHUB_OUTPUT
          else
            echo "name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          fi

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            packages/web-app/.next/cache
          key: nextjs-ssg-${{ runner.os }}-${{ hashFiles('packages/web-app/package.json', 'pnpm-lock.yaml') }}-${{ hashFiles('packages/web-app/**/*.js', 'packages/web-app/**/*.jsx', 'packages/web-app/**/*.ts', 'packages/web-app/**/*.tsx') }}
          restore-keys: |
            nextjs-ssg-${{ runner.os }}-${{ hashFiles('packages/web-app/package.json', 'pnpm-lock.yaml') }}-
            nextjs-ssg-${{ runner.os }}-

      - name: Run tests
        run: |
          pnpm --filter web-app test --passWithNoTests

      - name: Build Next.js SSG application
        run: |
          pnpm --filter web-app build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: Verify build output
        run: |
          cd packages/web-app
          
          if [ ! -d "out" ]; then
            echo "❌ SSG build output not found. Make sure Next.js export completed successfully."
            exit 1
          fi
          
          echo "✅ SSG build completed successfully"
          echo "Files in out directory:"
          ls -la out/

      - name: Create build artifact
        id: artifact
        run: |
          echo "name=nextjs-ssg-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: packages/web-app/out/
          retention-days: 7

  deploy:
    name: Deploy to S3
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: ./build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_DEPLOYMENT_REGION }}
          role-to-assume: ${{ vars.AWS_AUTH_ROLE }}

      - name: Get S3 bucket name from SSM
        id: params
        run: |
          BUCKET_NAME=$(aws ssm get-parameter --name "/web-perf-mon/web-app/bucket-name" --query 'Parameter.Value' --output text)
          DISTRIBUTION_ID=$(aws ssm get-parameter --name "/web-perf-mon/web-app/distribution-id" --query 'Parameter.Value' --output text)
          
          echo "bucket-name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "distribution-id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT

      - name: Deploy to S3
        run: |
          BRANCH_NAME="${{ needs.build.outputs.branch-name }}"
          
          echo "🚀 Deploying to S3 bucket: ${{ steps.params.outputs.bucket-name }}/$BRANCH_NAME/"
          
          # Sync build files to branch directory
          aws s3 sync ./build/ s3://${{ steps.params.outputs.bucket-name }}/$BRANCH_NAME/ \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --metadata-directive REPLACE
          
          # Set different cache control for HTML files
          aws s3 cp ./build/ s3://${{ steps.params.outputs.bucket-name }}/$BRANCH_NAME/ \
            --recursive \
            --exclude "*" \
            --include "*.html" \
            --cache-control "public, max-age=0, must-revalidate" \
            --metadata-directive REPLACE
          
          echo "✅ Deployment completed successfully"

      # Disabled for now as requested
      # - name: Copy main branch to root (disabled)
      #   if: false
      #   run: |
      #     if [ "${{ needs.build.outputs.branch-name }}" = "main" ]; then
      #       echo "🔄 Copying main branch to root directory"
      #       aws s3 sync s3://${{ steps.params.outputs.bucket-name }}/main/ s3://${{ steps.params.outputs.bucket-name }}/ \
      #         --delete \
      #         --cache-control "public, max-age=31536000, immutable" \
      #         --metadata-directive REPLACE
      #     fi

      - name: Invalidate CloudFront cache
        if: needs.build.outputs.branch-name == 'main'
        run: |
          echo "🔄 Invalidating CloudFront cache for main branch"
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ steps.params.outputs.distribution-id }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          echo "Created CloudFront invalidation: $INVALIDATION_ID"

      - name: Create deployment summary
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## Web App Deployment Summary
          
          - **Branch**: ${{ needs.build.outputs.branch-name }}
          - **Commit**: ${{ github.sha }}
          - **S3 Bucket**: ${{ steps.params.outputs.bucket-name }}
          - **Deployed to**: s3://${{ steps.params.outputs.bucket-name }}/${{ needs.build.outputs.branch-name }}/
          - **CloudFront Distribution**: ${{ steps.params.outputs.distribution-id }}
          
          ### Access URLs
          
          - **Direct S3**: https://${{ steps.params.outputs.bucket-name }}.s3.amazonaws.com/${{ needs.build.outputs.branch-name }}/index.html
          - **CloudFront** (main branch only): https://${{ vars.DOMAIN_NAME || 'app.perf-mon.examples.oleksiipopov.com' }}
          EOF
